{"version":3,"sources":["Button.js","Experience.js","App.js","serviceWorker.js","index.js"],"names":["Button","className","onClick","this","props","handler","React","Component","Experience","experience","titre","entreprise","dateDebut","dateFin","contexte","competences","languages","realisations","experienceIndex","App","handlerNextExperience","bind","handlerPreviousExperience","experiences","setState","clicked","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"k6EAYeA,G,mLAPX,OACE,yBAAKC,UAAU,0BAA0BC,QAASC,KAAKC,MAAMC,c,GAH9CC,IAAMC,YCeZC,E,uKAdX,OACE,yBAAKP,UAAU,SACb,gCAAME,KAAKC,MAAMK,WAAWC,MAA5B,KACA,gCAAMP,KAAKC,MAAMK,WAAWE,WAA5B,KACA,gCAAMR,KAAKC,MAAMK,WAAWG,UAA5B,KACA,gCAAMT,KAAKC,MAAMK,WAAWI,QAA5B,KACA,gCAAMV,KAAKC,MAAMK,WAAWK,SAA5B,KACA,+BAAKX,KAAKC,MAAMK,WAAWM,YAAYC,UAAvC,KACA,+BAAKb,KAAKC,MAAMK,WAAWQ,aAA3B,U,GAViBX,IAAMC,W,OCO3BW,EAAkB,EA2CPC,E,kDAzCb,aAAe,IAAD,8BACZ,gBACKC,sBAAwB,EAAKA,sBAAsBC,KAA3B,gBAC7B,EAAKC,0BAA4B,EAAKA,0BAA0BD,KAA/B,gBAHrB,E,oEAOiC,qBAAnCE,EAAYL,EAAgB,KACpCA,IACAf,KAAKqB,SAAS,CACZC,SAAS,O,kDAMgC,qBAAnCF,EAAYL,EAAgB,KACpCA,IACAf,KAAKqB,SAAS,CACZC,SAAS,O,+BAMb,OACE,6BACE,yBAAKxB,UAAU,eACb,kBAAC,EAAD,CAAQI,QAASF,KAAKmB,6BAExB,yBAAKrB,UAAU,gBACb,kBAAC,EAAD,CAAQI,QAASF,KAAKiB,yBAExB,yBAAKnB,UAAU,UACb,kBAAC,EAAD,CAAYQ,WAAYc,EAAYL,W,GAnC5BZ,IAAMC,WCEJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.32f63080.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nclass Button extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"block button-background\" onClick={this.props.handler}>\r\n      </div>\r\n    ) \r\n  }\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nclass Experience extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"block\">\r\n        <h1> {this.props.experience.titre} </h1>\r\n        <h2> {this.props.experience.entreprise} </h2>\r\n        <h4> {this.props.experience.dateDebut} </h4>\r\n        <h4> {this.props.experience.dateFin} </h4>\r\n        <h5> {this.props.experience.contexte} </h5>\r\n        <p> {this.props.experience.competences.languages} </p>\r\n        <p> {this.props.experience.realisations} </p>\r\n      </div>\r\n    ) \r\n  }    \r\n}\r\n\r\nexport default Experience;","import React from 'react';\nimport './App.css';\n\nimport Button from './Button';\nimport Experience from './Experience';\n\nimport experiences from './experiences.json';\n\n\nlet experienceIndex = 0; \nclass App extends React.Component {\n  constructor() {\n    super();\n    this.handlerNextExperience = this.handlerNextExperience.bind(this);\n    this.handlerPreviousExperience = this.handlerPreviousExperience.bind(this);\n  }\n\n  handlerNextExperience() {\n    if(typeof experiences[experienceIndex+1] !== 'undefined') {\n      experienceIndex++;\n      this.setState({\n        clicked: true\n      });\n    }\n  }\n\n  handlerPreviousExperience() {\n    if(typeof experiences[experienceIndex-1] !== 'undefined') {\n      experienceIndex--;\n      this.setState({\n        clicked: true\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"left button\">\n          <Button handler={this.handlerPreviousExperience} />\n        </div>\n        <div className=\"right button\">\n          <Button handler={this.handlerNextExperience} />\n        </div>\n        <div className=\"center\">\n          <Experience experience={experiences[experienceIndex]} />\n        </div>\n      </div>\n    ) \n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}