{"version":3,"sources":["Bouton.js","Liste.js","Competences.js","Contexte.js","Dates.js","Header.js","Experience.js","Experiences.js","DatesHomePage.js","ExperienceMini.js","HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Bouton","props","canBePressed","className","button","onClick","icon","Liste","items","length","title","map","item","key","Competences","competences","languages","methodologies","outilsAndApplications","Contexte","experience","contexte","roles","Dates","startDate","dates","debut","endDate","fin","format","date","Intl","DateTimeFormat","year","month","Date","parse","Math","abs","duration","Header","src","logoUrl","alt","titre","entreprise","Experience","Experiences","React","useState","experienceIndex","setExperience","currentExperience","experiences","onClose","HomePage","parseAndFormat","parsedDate","trans","x","y","s","ExperienceMini","useSpring","xys","config","mass","tension","friction","animation","set","div","updateExperienceIndex","i","onMouseMove","clientX","clientY","onMouseLeave","style","transform","interpolate","DatesHomePage","App","displayExperience","setDisplayExperience","setExperienceIndex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eed33870.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Bouton.css';\r\n\r\nconst Bouton = (props) => {\r\n  if (props.canBePressed) {\r\n    return (\r\n      <div className={`button clickable ${props.button}`} onClick={props.onClick}>\r\n          <i className=\"material-icons icon-large\">{props.icon}</i>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n      <div className={`button ${props.button}`}>\r\n          <i className=\"material-icons icon-large grey\">{props.icon}</i>\r\n      </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Bouton;","import React from 'react'\r\n\r\nconst Liste = (props) => {\r\n\r\n  if (props.items.length === 0) {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"block\">\r\n      <h5>{props.title}</h5>\r\n      <ul>\r\n        {props.items.map(item => (\r\n            <li key={item}>\r\n              {item}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Liste;","import React from 'react'\r\nimport Liste from './Liste'\r\n\r\nconst Competences = (props) => {\r\n  return (\r\n    <div className=\"block border padding15\">\r\n      <h4>Compétences</h4>\r\n      <Liste title=\"Languages et framework:\" items={props.competences.languages} />\r\n      <Liste title=\"Méthodologies:\" items={props.competences.methodologies} />\r\n      <Liste title=\"Outils & Applications:\" items={props.competences.outilsAndApplications} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Competences;","import React from 'react';\r\nimport Liste from './Liste';\r\n\r\nconst Contexte = (props) => {\r\n  return (\r\n    <div className=\"block\">\r\n      <div className=\"block\">\r\n      \t<h3> Contexte:</h3>\r\n      \t<p> {props.experience.contexte} </p>\r\n      </div>\r\n      <Liste title=\"Rôles & Réalisations:\" items={props.experience.roles} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contexte;","import React from 'react';\r\n\r\nconst Dates = (props) => {\r\n  const startDate = props.dates.debut;\r\n  const endDate = props.dates.fin;\r\n\r\n  const format = (date) => {\r\n    return new Intl.DateTimeFormat(\"fr-FR\", {\r\n          year: \"numeric\",\r\n          month: \"long\"\r\n        }).format(Date.parse(date))\r\n  };\r\n\r\n  const duration = (startDate, endDate) => {\r\n    return new Intl.DateTimeFormat(\"fr-FR\", {\r\n          month:\"numeric\"\r\n        }).format(Math.abs(Date.parse(endDate) - Date.parse(startDate)));\r\n  };\r\n\r\n  if(startDate === \"\") {\r\n    return null;\r\n  }\r\n  return (\r\n    <div className=\"block border padding15\">\r\n      <h4>Durée: {duration(startDate, endDate)} MOIS</h4>\r\n      <p>De {format(startDate)}</p>\r\n      <p>À {format(endDate)}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dates;","import React from 'react';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className=\"header block border\">\r\n      <img className=\"brand-logo block\" src={props.experience.logoUrl} alt=\"brand logo\"></img>\r\n      <div className=\"right-header block\">\r\n        <h1> {props.experience.titre} </h1>\r\n        <h3> {props.experience.entreprise} </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Competences from \"./Competences\";\r\nimport Contexte from './Contexte';\r\nimport Dates from './Dates';\r\nimport Header from './Header';\r\n\r\nimport './Experience.css';\r\n\r\nconst Experience = (props) => {\r\n  return (\r\n    <div className=\"block\">\r\n      <Header experience={props.experience} />\r\n      <div className=\"left\">\r\n        <Dates dates={props.experience.dates} />\r\n        <Competences competences={props.experience.competences}/>\r\n      </div>\r\n      <div className=\"right\">\r\n        <Contexte experience={props.experience} />\r\n      </div>\r\n      <p className=\"clear\"></p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Experience;","import React from 'react';\r\nimport './Experiences.css';\r\n\r\nimport Bouton from './Bouton';\r\nimport Experience from './Experience';\r\n\r\nimport experiences from './experiences.json';\r\n\r\n\r\nconst Experiences = (props) => {\r\n  // Hooks\r\n  const [experienceIndex, setExperience] = React.useState(props.experienceIndex);\r\n\r\n  // Setup\r\n  const currentExperience = experiences[experienceIndex];\r\n\r\n  // Handlers\r\n  const onNextExperience = () => {\r\n    if (experienceIndex < experiences.length - 1) {\r\n      setExperience(experienceIndex + 1);\r\n    }\r\n  }\r\n\r\n  const onPreviousExperience = () => {\r\n    if (experienceIndex > 0) {\r\n      setExperience(experienceIndex - 1);\r\n    }\r\n  }\r\n\r\n  const canPressNext = () => {\r\n    if (experienceIndex < experiences.length - 1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  const canPressPrevious = () => {\r\n    if (experienceIndex > 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <i onClick={props.onClose} className=\"material-icons icon-large clickable\">close</i>\r\n      <Bouton onClick={onPreviousExperience} canBePressed={canPressPrevious()} icon=\"keyboard_arrow_left\" button=\"left-button\"/>\r\n      <Bouton onClick={onNextExperience} canBePressed={canPressNext()} icon=\"keyboard_arrow_right\" button=\"right-button\"/>\r\n\r\n      <div className=\"center border\">\r\n        <Experience experience={currentExperience} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Experiences;","import React from 'react';\r\n\r\nconst HomePage = (props) => {\r\n\r\n  const parseAndFormat = (date) => {\r\n    const parsedDate = Date.parse(date);\r\n    return new Intl.DateTimeFormat(\"fr-FR\", {\r\n          year: \"2-digit\",\r\n          month: \"2-digit\"\r\n        }).format(parsedDate);\r\n  };\r\n\r\n  if (props.debut === \"\") {\r\n    return null;\r\n  }\r\n  return <p>{parseAndFormat(props.debut)} - {parseAndFormat(props.fin)}</p>\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nimport DatesHomePage from './DatesHomePage';\r\n\r\nconst calc = (x, y) => [0, 0, 1.08];\r\nconst trans = (x, y, s) => `perspective(600px) scale(${s})`;\r\n\r\n\r\nconst ExperienceMini = (props) => {\r\n\r\n  const [animation, set] = useSpring(() => ({ xys: [0, 0, 1], config: { mass: 5, tension: 350, friction: 40 } }));\r\n  return (\r\n    <animated.div\r\n    className=\"block clickable experience border\"\r\n    onClick={() => {props.updateExperienceIndex(props.i)}}\r\n    onMouseMove={({ clientX: x, clientY: y }) => set({ xys: calc(x, y) })}\r\n    onMouseLeave={() => set({ xys: [0, 0, 1] })}\r\n    style={{ transform: animation.xys.interpolate(trans) }}\r\n    >\r\n      <p className=\"bold\">{props.experience.titre}</p>\r\n      <p>{props.experience.entreprise}</p>\r\n      <DatesHomePage debut={props.experience.dates.debut} fin={props.experience.dates.fin}/>\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nexport default ExperienceMini;","import React from 'react';\r\nimport './HomePage.css';\r\n\r\nimport ExperienceMini from './ExperienceMini';\r\n\r\nimport experiences from './experiences.json';\r\n\r\n\r\nconst HomePage = (props) => {\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>FULL STACK ENGINEER</h1>\r\n        <h2>2 ans d'expérience</h2>\r\n        <h4>Je suis quelqu'un de curieux, sportif et surtout passionné de nouvelles technologies.</h4>\r\n      </div>\r\n      <div>\r\n        <p>Mes experiences:</p>\r\n        <div className=\"experiences\">\r\n          {experiences.map((experience, i) => (\r\n            <ExperienceMini key={i} i={i} experience={experience} updateExperienceIndex={(i) => props.updateExperienceIndex(i)}/>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;","import React from 'react';\n\nimport './App.css';\n\nimport Experiences from './Experiences';\nimport HomePage from './HomePage';\n\n\nconst App = (props) => {\n\n  // Hooks\n  const [displayExperience, setDisplayExperience] = React.useState(false);\n  const [experienceIndex, setExperienceIndex] = React.useState(0);\n\n  // Handlers\n  const updateExperienceIndex = (i) => {\n    setExperienceIndex(i);\n    setDisplayExperience(true);\n  }\n\n  if(displayExperience) { \n    return  <Experiences experienceIndex={experienceIndex} onClose={() => setDisplayExperience(false)} />;\n  }\n  return <HomePage updateExperienceIndex={(i) => updateExperienceIndex(i)} />;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}