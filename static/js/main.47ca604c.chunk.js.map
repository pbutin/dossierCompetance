{"version":3,"sources":["Button.js","Liste.js","Competences.js","Contexte.js","Dates.js","Header.js","Experience.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","className","onClick","Liste","title","items","map","item","key","Competences","competences","languages","methodologies","outilsAndApplications","Contexte","experience","contexte","roles","Dates","startDate","Date","parse","dates","debut","endDate","fin","format","date","Intl","DateTimeFormat","year","month","Math","abs","duration","Header","src","logoUrl","alt","titre","entreprise","Experience","App","React","useState","experienceIndex","setExperience","currentExperience","experiences","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"irFAUeA,G,YAPA,SAACC,GACf,OACG,yBAAKC,UAAU,0BAA0BC,QAASF,EAAME,YCU7CC,EAbD,SAACH,GACb,OACE,yBAAKC,UAAU,SACb,4BAAKD,EAAMI,OACRJ,EAAMK,MAAMC,KAAI,SAAAC,GAAI,OACjB,wBAAIC,IAAKD,GACNA,QCMAE,EAXK,SAACT,GACnB,OACE,yBAAKC,UAAU,SACb,8CACA,kBAAC,EAAD,CAAOG,MAAM,0BAA0BC,MAAOL,EAAMU,YAAYC,YAChE,kBAAC,EAAD,CAAOP,MAAM,oBAAiBC,MAAOL,EAAMU,YAAYE,gBACvD,kBAAC,EAAD,CAAOR,MAAM,yBAAyBC,MAAOL,EAAMU,YAAYG,0BCMtDC,EAZE,SAACd,GAChB,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,SACd,0CACA,+BAAKD,EAAMe,WAAWC,SAAtB,MAED,kBAAC,EAAD,CAAOZ,MAAM,8BAAwBC,MAAOL,EAAMe,WAAWE,UCmBpDC,EA3BD,SAAClB,GACb,IAAMmB,EAAYC,KAAKC,MAAMrB,EAAMsB,MAAMC,OACnCC,EAAUJ,KAAKC,MAAMrB,EAAMsB,MAAMG,KAEjCC,EAAS,SAACC,GACd,OAAO,IAAIC,KAAKC,eAAe,QAAS,CAClCC,KAAM,UACNC,MAAO,SACNL,OAAOC,IAShB,OACE,yBAAK1B,UAAU,SACb,yCACA,4BATa,SAACkB,EAAWK,GAC3B,OAAO,IAAII,KAAKC,eAAe,QAAS,CAClCE,MAAM,YACLL,OAAOM,KAAKC,IAAIT,EAAUL,IAM1Be,CAASf,EAAWK,GAAzB,SACA,iCAAOE,EAAOP,IACd,mCAAMO,EAAOF,MCVJW,EAZA,SAACnC,GACd,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,mBAAmBmC,IAAKpC,EAAMe,WAAWsB,QAASC,IAAI,eACrE,yBAAKrC,UAAU,sBACb,+BAAKD,EAAMe,WAAWwB,MAAtB,KACA,+BAAKvC,EAAMe,WAAWyB,WAAtB,QCgBOC,G,MAhBI,SAACzC,GAClB,OACE,yBAAKC,UAAU,SACb,kBAAC,EAAD,CAAQc,WAAYf,EAAMe,aAC1B,yBAAKd,UAAU,QACb,kBAAC,EAAD,CAAOqB,MAAOtB,EAAMe,WAAWO,QAC/B,kBAAC,EAAD,CAAaZ,YAAaV,EAAMe,WAAWL,eAE7C,yBAAKT,UAAU,SACb,kBAAC,EAAD,CAAUc,WAAYf,EAAMe,cAE9B,uBAAGd,UAAU,a,OCyBJyC,EAnCH,SAAC1C,GAAU,MAEoB2C,IAAMC,SAAS,GAFnC,mBAEdC,EAFc,KAEGC,EAFH,KAKfC,EAAoBC,EAAYH,GAetC,OACE,6BACE,yBAAK5C,UAAU,sBACb,kBAAC,EAAD,CAAQC,QATe,WACvB2C,EAAkB,GACpBC,EAAcD,EAAkB,OAShC,yBAAK5C,UAAU,8BACb,kBAAC,EAAD,CAAQC,QAlBW,WACnB2C,EAAkBG,EAAYC,OAAS,GACzCH,EAAcD,EAAkB,OAkBhC,yBAAK5C,UAAU,UACb,kBAAC,EAAD,CAAYc,WAAYgC,OC1BZG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.47ca604c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nconst Button = (props) => {\r\n\treturn (\r\n\t\t  <div className=\"block button-background\" onClick={props.onClick}>\r\n\t\t  </div>\r\n\t);\r\n}\r\n\r\nexport default Button;","import React from 'react'\r\n\r\nconst Liste = (props) => {\r\n  return (\r\n    <div className=\"block\">\r\n      <h5>{props.title}</h5>\r\n        {props.items.map(item => (\r\n            <li key={item}>\r\n              {item}\r\n            </li>\r\n          ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Liste;","import React from 'react'\r\nimport Liste from './Liste'\r\n\r\nconst Competences = (props) => {\r\n  return (\r\n    <div className=\"block\">\r\n      <h4>Compétences</h4>\r\n      <Liste title=\"Languages et framework:\" items={props.competences.languages} />\r\n      <Liste title=\"Méthodologies:\" items={props.competences.methodologies} />\r\n      <Liste title=\"Outils & Applications:\" items={props.competences.outilsAndApplications} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Competences;","import React from 'react';\r\nimport Liste from './Liste';\r\n\r\nconst Contexte = (props) => {\r\n  return (\r\n    <div className=\"block\">\r\n      <div className=\"block\">\r\n      \t<h3> Contexte:</h3>\r\n      \t<p> {props.experience.contexte} </p>\r\n      </div>\r\n      <Liste title=\"Rôles & Réalisations:\" items={props.experience.roles} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Contexte;","import React from 'react';\r\n\r\nconst Dates = (props) => {\r\n  const startDate = Date.parse(props.dates.debut);\r\n  const endDate = Date.parse(props.dates.fin);\r\n\r\n  const format = (date) => {\r\n    return new Intl.DateTimeFormat(\"fr-FR\", {\r\n          year: \"numeric\",\r\n          month: \"long\"\r\n        }).format(date)\r\n  };\r\n\r\n  const duration = (startDate, endDate) => {\r\n    return new Intl.DateTimeFormat(\"fr-FR\", {\r\n          month:\"numeric\"\r\n        }).format(Math.abs(endDate - startDate));\r\n  };\r\n\r\n  return (\r\n    <div className=\"block\">\r\n      <h4>Durée:</h4>\r\n      <h5>{duration(startDate, endDate)} MOIS</h5>\r\n      <p>De {format(startDate)}</p>\r\n      <p>À {format(endDate)}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dates;","import React from 'react';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className=\"header block\">\r\n      <img className=\"brand-logo block\" src={props.experience.logoUrl} alt=\"brand logo\"></img>\r\n      <div className=\"right-header block\">\r\n        <p> {props.experience.titre} </p>\r\n        <p> {props.experience.entreprise} </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Competences from \"./Competences\";\r\nimport Contexte from './Contexte';\r\nimport Dates from './Dates';\r\nimport Header from './Header';\r\n\r\nimport './Experience.css';\r\n\r\nconst Experience = (props) => {\r\n  return (\r\n    <div className=\"block\">\r\n      <Header experience={props.experience} />\r\n      <div className=\"left\">\r\n        <Dates dates={props.experience.dates} />\r\n        <Competences competences={props.experience.competences}/>\r\n      </div>\r\n      <div className=\"right\">\r\n        <Contexte experience={props.experience} />\r\n      </div>\r\n      <p className=\"clear\"></p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Experience;","import React from 'react';\nimport './App.css';\n\nimport Button from './Button';\nimport Experience from './Experience';\n\nimport experiences from './experiences.json';\n\n\nconst App = (props) => {\n  // Hooks\n  const [experienceIndex, setExperience] = React.useState(0);\n\n  // Setup\n  const currentExperience = experiences[experienceIndex];\n\n  // Handlers\n  const onNextExperience = () => {\n    if (experienceIndex < experiences.length - 1) {\n      setExperience(experienceIndex + 1);\n    }\n  }\n\n  const onPreviousExperience = () => {\n    if (experienceIndex > 0) {\n      setExperience(experienceIndex - 1);\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"left-button button\">\n        <Button onClick={onPreviousExperience} />\n      </div>\n      <div className=\"right-button rotate button\">\n        <Button onClick={onNextExperience} />\n      </div>\n      <div className=\"center\">\n        <Experience experience={currentExperience} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}